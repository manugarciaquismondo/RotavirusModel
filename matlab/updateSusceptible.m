function [ result ] = updateSusceptible(rotavirusPop, inputStage, offsetMultiplier, offsetSum, firstDivisor, secondDivisor)
%updateSusceptible Summary of this function goes here
%   Detailed explanation goes here
global nu kappa lambda omega_R omega_V iota gamma stages
multiplierSwitch=getMultiplierSwitcher(inputStage);

% s1  + (1-nu)*(s0/183) + m0/183 + (1-(1/183))*kappa*(1-lambda)*omega_V*v1*(i0+i1+i2+i3+i4)...
%     + (1-(1/183))*(1-iota)*gamma*i1  + (1-(1/183))*kappa*(1-lambda)*omega_R*r1*(i0+i1+i2+i3+i4)...
%     -(1-(1/183))*kappa*lambda*s1*(i0+i1+i2+i3+i4) -(s1/183) - (1-(1/183))*nu*s1 ...
%     + (1/183)*(1-iota)*gamma*i0;
% result = rotavirusPop.susceptible(inputStage) + firstDivisor*((1-nu)*offsetMultiplier*rotavirusPop.susceptible(inputStage-1)...
%         + offsetSum + (1-iota)*gamma*rotavirusPop.infected(inputStage-1)) + (1-secondDivisor)*(kappa*sum(rotavirusPop.infected(:))*((1-lambda)*(omega_V*rotavirusPop.vaccinated(inputStage)...
%         + omega_R*rotavirusPop.recovered(inputStage)) -  lambda*rotavirusPop.susceptible(inputStage))...
%         + (1-iota)*gamma*rotavirusPop.infected(inputStage) -nu* rotavirusPop.susceptible(inputStage)) - secondDivisor*rotavirusPop.susceptible(inputStage)*multiplierSwitch;
result = rotavirusPop.susceptible(inputStage)  + (1-nu)*offsetMultiplier*(rotavirusPop.susceptible(inputStage-1)*firstDivisor)...
    + offsetSum*firstDivisor + (1-secondDivisor)*kappa*(1-lambda)*omega_V*rotavirusPop.vaccinated(inputStage)*sum(rotavirusPop.infected(:))...
     + (1-secondDivisor)*(1-iota)*gamma*rotavirusPop.infected(inputStage)  + (1-secondDivisor)*kappa*(1-lambda)*omega_R*rotavirusPop.recovered(inputStage)*sum(rotavirusPop.infected(:))...
     -(1-secondDivisor)*kappa*lambda*rotavirusPop.susceptible(inputStage)*sum(rotavirusPop.infected(:)) -multiplierSwitch*(rotavirusPop.susceptible(inputStage)*secondDivisor) - (1-secondDivisor)*nu*rotavirusPop.susceptible(inputStage) ...
     + firstDivisor*(1-iota)*gamma*rotavirusPop.infected(inputStage-1);
%  S2= s2 + (1-nu)*(1-kappa*lambda*(i0+i1+i2+i3+i4))*s1/183 + v1/183 ...
%     +(1-(1/365))*kappa*(1-lambda)*omega_V*v2*(i0+i1+i2+i3+i4) ...
%     + (1-(1/365))*(1-iota)*gamma*i2  + (1-(1/365))*kappa*(1-lambda)*omega_R*r2*(i0+i1+i2+i3+i4) ...
%     -(1-(1/365))*kappa*lambda*s2*(i0+i1+i2+i3+i4) -(s2/365) ...
%     -(1-(1/365))*nu*s2 +(1/183)*(1-iota)*gamma*i1;
end

