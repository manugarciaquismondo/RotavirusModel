function [result] = updateVaccinated(rotavirusPop, inputStage, offsetMultiplier, firstDivisor, secondDivisor)
global nu kappa lambda omega_V
multiplierSwitch=getMultiplierSwitcher(inputStage);


% V2= v2 + nu*(1/183)*r1 + nu*(1-kappa*lambda*(i0+i1+i2+i3+i4))*(1/183)*s1 +...
%     nu*(1-(1/365))*s2  + nu*(1-(1/365))*r2 - (1/365)*v2...
%     -(1-(1/365))*kappa*(1-lambda)*omega_V*v2*(i0+i1+i2+i3+i4);

% result= rotavirusPop.vaccinated(inputStage) ...
%        + nu*(firstDivisor*(rotavirusPop.recovered(inputStage-1)*offsetMultiplier+ rotavirusPop.susceptible(inputStage-1))...
%      + (1-secondDivisor)*(rotavirusPop.susceptible(inputStage)+rotavirusPop.recovered(inputStage)))...
%      - rotavirusPop.vaccinated(inputStage)*(secondDivisor*multiplierSwitch +(1-secondDivisor)...
%      *kappa*(1-lambda)*omega_V*sum(rotavirusPop.infected(:)));
result = rotavirusPop.vaccinated(inputStage)  + nu*firstDivisor*rotavirusPop.recovered(inputStage-1)...
    + offsetMultiplier*nu*firstDivisor*rotavirusPop.susceptible(inputStage-1)  ...
    + nu*(1-secondDivisor)*rotavirusPop.susceptible(inputStage)  ...
    + nu*(1-secondDivisor)*rotavirusPop.recovered(inputStage)...
    - multiplierSwitch*secondDivisor*rotavirusPop.vaccinated(inputStage) ...
    - (1-secondDivisor)*kappa*(1-lambda)*omega_V*rotavirusPop.vaccinated(inputStage)*sum(rotavirusPop.infected(:));
end
